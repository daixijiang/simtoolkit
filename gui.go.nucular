/* VSIM Serial Product Toolkit
 * Author: daixijiang@gmail.com (2019)
 */

package main

import (
	"fmt"
	"image/color"

	"github.com/aarzilli/nucular"
	"github.com/aarzilli/nucular/label"
	"github.com/aarzilli/nucular/rect"
	nstyle "github.com/aarzilli/nucular/style"
)

type portGroup struct {
	MainWindow    *nucular.Window
	CurrentPortId [SERIAL_PORT_MAX]int

	Module   Module_cfg
	Message  string
	PortList []string
	Checkbox [SERIAL_PORT_MAX]bool
}

//////////////////////////////////////////////////////////////////////////////////

func (pg *portGroup) showUI() {
	wnd := nucular.NewMasterWindow(0, szTitle, pg.showUImain)
	wnd.SetStyle(nstyle.FromTheme(nstyle.DarkTheme, gConfig.Scaling))
	wnd.Main()
}

func (pg *portGroup) showUImain(w *nucular.Window) {
	pg.MainWindow = w

	pg.showMenuBar(w)
	w.Row(5).Dynamic(1)

	for port_id := 0; port_id < gConfig.Serial.Serial_max; port_id++ {
		pg.showPortG(w, port_id)
	}

	w.Row(5).Dynamic(1)
	w.Row(30).Dynamic(3)
	if w.Button(label.T("ProduceAll"), false) {
		pg.btnHandleAll(Btn_CMD_Produce, true)
	}

	if w.Button(label.T("CheckDoAll"), false) {
		pg.btnHandleAll(Btn_CMD_CheckDo, true)
	}

	if w.Button(label.T("CloseAll"), false) {
		pg.btnHandleAll(Btn_CMD_Close, false)
	}

	w.Row(30).Dynamic(3)
	if w.Button(label.T("RefreshPort"), false) {
		pg.btnRefreshPort()
	}

	if w.Button(label.T("LoadToken"), false) {
		pg.btnLoadToken()
	}

	if w.Button(label.T("Quit"), false) {
		pg.btnExit()
	}
}

func (pg *portGroup) showMenuBar(w *nucular.Window) {
	w.Row(25).Static(400, 100, 100)
	clryellow := color.RGBA{0xff, 0xff, 0x00, 0xff}
	w.LabelColored(fmt.Sprintf("** %s  (%s) **", szBanner, szVersion), "CC", clryellow)

	w.MenubarBegin()
	if w := w.Menu(label.TA("Module", "RC"), 150, nil); w != nil {
		w.Row(25).Dynamic(1)
		newmodule := pg.Module
		if w.OptionText("SIM800C", newmodule == SIM800C) {
			newmodule = SIM800C
		}
		if w.OptionText("EC20", newmodule == EC20) {
			newmodule = EC20
		}
		if w.OptionText("EC20_AUTO", newmodule == EC20_AUTO) {
			newmodule = EC20_AUTO
		}

		if gConfig.Simfake == 1 {
			if w.OptionText("EC20_TC1", newmodule == EC20_TC1) {
				newmodule = EC20_TC1
			}
			if w.OptionText("EC20_TC3", newmodule == EC20_TC3) {
				newmodule = EC20_TC3
			}
		}

		if newmodule != pg.Module {
			pg.Module = newmodule
			pg.setModule(newmodule)
		}
	}

	w.MenubarEnd()
}

func (pg *portGroup) showPortG(w *nucular.Window, portid int) {
	w.Row(40).Dynamic(1)
	clrred := color.RGBA{0xff, 0x00, 0x00, 0xff}
	clrgreen := color.RGBA{0x00, 0xff, 0x00, 0xff}

	if sw := w.GroupBegin("Group Port", nucular.WindowNoScrollbar|nucular.WindowBorder); sw != nil {
		sw.Row(2).Dynamic(1)
		sw.Row(26).Static(85, 45, 70, 70, 70, 10, 70, 10, 70, 600)
		sw.CheckboxText(fmt.Sprintf("Port[%d]:", portid), &pg.Checkbox[portid])

		if serial_port[portid].strInfo == "" {
			sw.Label(string("(*)"), "LC")
		} else if serial_port[portid].strInfo == "XXX" {
			sw.LabelColored(fmt.Sprintf("(%s)", serial_port[portid].strInfo), "LC", clrred)
		} else {
			sw.LabelColored(fmt.Sprintf("(%s)", serial_port[portid].strInfo), "LC", clrgreen)
		}

		pg.CurrentPortId[portid] = sw.ComboSimple(pg.PortList, pg.CurrentPortId[portid], 20)
		strCom := COM_RNAME_PREFIX + pg.PortList[pg.CurrentPortId[portid]]

		if sw.Button(label.T("Open"), false) {
			pg.btnOpen(portid, strCom)
		}

		if sw.Button(label.T("Produce"), false) {
			pg.btnProduce(portid, strCom)
		}

		sw.Label(string(" "), "LC")
		if sw.Button(label.T("Close"), false) {
			pg.btnClose(portid, strCom)
		}

		sw.Label(string(" "), "LC")

		var CmdEditor nucular.TextEditor
		CmdEditor.Flags |= nucular.EditBox
		CmdEditor.Buffer = []rune("AT")
		CmdEditor.Maxlen = 128

		if sw.Button(label.T("ATsend"), false) {
			pg.btnATSend(portid, strCom, string(CmdEditor.Buffer))
		}

		CmdEditor.Edit(sw)

		sw.GroupEnd()
	}
}

//////////////////////////////////////////////////////////////////////////////////
func (pg *portGroup) openMessage(message string) {
	var wf nucular.WindowFlags
	wf |= nucular.WindowBorder
	wf |= nucular.WindowMovable
	wf |= nucular.WindowNoScrollbar
	wf |= nucular.WindowClosable
	wf |= nucular.WindowTitle
	pg.Message = message
	pg.MainWindow.Master().PopupOpen("Message", wf, rect.Rect{170, 100, 300, 190}, true, pg.openMessageBox)
}

func (pg *portGroup) openMessageBox(w *nucular.Window) {
	w.Row(30).Dynamic(1)
	w.Label(fmt.Sprintf("%s", pg.Message), "CC")
	w.Row(30).Dynamic(1)
	w.Row(30).Dynamic(1)
	if w.Button(label.T("OK"), false) {
		w.Close()
	}
}

func (pg *portGroup) doResult(resp PortResult) {
	if (resp.Oper == Btn_CMD_Produce) || (resp.Oper == Btn_CMD_CheckDo) {
		if resp.Result == 0 {
			serial_port[resp.Portid].strInfo = "OK"
		} else {
			serial_port[resp.Portid].strInfo = "XXX"
		}
	} else if resp.Oper == Btn_CMD_Close {
		serial_port[resp.Portid].strInfo = "*"
	}
}
